prob_reprod$pR_overall <- (prob_reprod$pR_control + prob_reprod$pR_removal)/2
###
###  calculate site means for fecundity
###
fecD <- subset(D,D$Fecundity>0 & D$fecundityflag==0)
mean_fecundity <- fecD %>% group_by(SiteCode,Year,Treatment) %>%
summarize(mean=mean(log(Fecundity)),
q05=quantile(log(Fecundity),0.05),
q95=quantile(log(Fecundity),0.95) )  %>%
pivot_wider(names_from=Treatment, names_prefix="logF_",values_from=c(mean, q05, q95))
mean_fecundity$fec_logratio <- mean_fecundity$mean_logF_control - mean_fecundity$mean_logF_removal
# join site means
site_means <- merge(prob_reprod,mean_fecundity,all.x=T)
# calculate fitness on log scales
site_means$fit_control <- log(site_means$pR_control) + site_means$mean_logF_control
site_means$fit_removal <- log(site_means$pR_removal) + site_means$mean_logF_removal
site_means$fit_logratio <- site_means$fit_control - site_means$fit_removal
# set fitness NAs (caused by zero prob. reproduction) to -5 (lower than lowest log fitness)
site_means$fit_control[is.na(site_means$fit_control)] <- -5
site_means$fit_removal[is.na(site_means$fit_removal)] <- -5
###
### import site info -------------------------------------------------------------------
###
# year 2021
siteD1 <- read.csv("../rawdata/SiteInfo_2020-2021.csv",header=T)
names(siteD1)[1:3] <- c("SiteCode" ,"Lat","Lon")
siteD1$Year = 2021
# make site SiteCodes match those in the demography file
siteD1$SiteCode[siteD1$SiteCode=="SymstadS1"] <- "Symstad1"
# year 2022
siteD <- read.csv("../rawdata/SiteInfo_2021-2022.csv",header=T)
names(siteD)[1:3] <- c("SiteCode" ,"Lat","Lon")
siteD$Year = 2022
# make site SiteCodes match those in the demography file
siteD$SiteCode[siteD$SiteCode=="EnsingS1_SuRDC"] <- "EnsingS1 SuRDC"
siteD$SiteCode[siteD$SiteCode=="EnsingS2_SumPrinceRd"] <- "EnsingS2 Summerland-Princeton"
siteD$SiteCode[siteD$SiteCode=="EnsingS3_BearCreek"] <- "EnsingS3 Bear Creek"
siteD$SiteCode[siteD$SiteCode=="EnsingS4_LDBM"] <- "EnsingS4 Lundbom"
siteD$SiteCode[siteD$SiteCode=="SymstadS1"] <- "Symstad1"
siteD$SiteCode[siteD$SiteCode=="SymstadS2"] <- "Symstad2"
# combine years into one data frame
siteD <- rbind(siteD1[,c("SiteCode","Lat","Lon","Year")],siteD[,c("SiteCode","Lat","Lon","Year")])
#remove Lehnoff sites
tmp <- grep("LEHN",siteD$SiteCode)
siteD <- siteD[-tmp,]
rm(siteD1,tmp)
###
### pull climate data for each site
###
# Daymet means for fall through spring
climD <- read.csv("../deriveddata/Satellites_daymet_Fall2Spr_means.csv",header=T)
# make site SiteCodes match those in the demography file
climD$SiteCode[climD$SiteCode=="EnsingS1_SuRDC"] <- "EnsingS1 SuRDC"
climD$SiteCode[climD$SiteCode=="EnsingS2_SumPrinceRd"] <- "EnsingS2 Summerland-Princeton"
climD$SiteCode[climD$SiteCode=="EnsingS3_BearCreek"] <- "EnsingS3 Bear Creek"
climD$SiteCode[climD$SiteCode=="EnsingS4_LDBM"] <- "EnsingS4 Lundbom"
climD$SiteCode[climD$SiteCode=="SymstadS1"] <- "Symstad1"
climD$SiteCode[climD$SiteCode=="SymstadS2"] <- "Symstad2"
# merge to site info
names(climD)[which(names(climD)=="climYr")] <- "Year"
siteD <- merge(siteD,climD,all.x=T)
# merge to site means
site_means <- merge(siteD,site_means)
###
### Figures
###
par(tcl=-0.2,mgp=c(2,0.5,0))
# treatment effects on prob of reproduction
par(mar=c(3,5,3,1))
plot(site_means$pR_removal,site_means$pR_control,
xlab="Removal",ylab="Control", xlim=c(0,1), ylim=c(0,1),
main="Probability of reproduction")
abline(0,1,lty="dashed")
# map mean prob of reproduction
par(mar=c(4,4,4,4))
map("state",xlim=c(-128,-95),ylim=c(30,52))
#title("Fitness")
points(x=site_means$Lon,y=site_means$Lat,pch=".",col="black")
symbols(x=site_means$Lon,y=site_means$Lat,circles=site_means$pR_overall,inches=0.4,add=T)
# mean prob of reproduction and climate
par(mar=c(3,5,3,1))
mycol <- ifelse(site_means$Lon < -109, "blue","red")
plot(site_means$prcp,site_means$pR_overall,pch=16, col=mycol,
xlab="Precipitation (mm)",ylab="Prob. seed production")
legend("topleft",c("west","east"),pch=16,col=c("blue","red"))
# # paired t-test
# x <- prob_reprod$mean_control-prob_reprod$mean_removal
# summary(lm(x~1))
# fecundity figures
threshold <- 0.1
tmp <- which(site_means$pR_control >= threshold & site_means$pR_removal >= threshold)
# treatment 1:1
par(mar=c(3,5,3,1))
#mycol <- ifelse(site_means$Lon < -109, "blue","red")
plot(site_means$mean_logF_removal[tmp],site_means$mean_logF_control[tmp], col="black",
xlab="Removal",ylab="Control", xlim=c(0,7), ylim=c(0,7),pch=16,main="log Fecundity")
abline(0,1,lty="dashed")
# removals confidence intervals
arrows(x0=site_means$q05_logF_removal[tmp],
y0=site_means$mean_logF_control[tmp],
x1=site_means$q95_logF_removal[tmp],
y1=site_means$mean_logF_control[tmp],angle=90,length=0,code=3)
# controls confidence intervals
arrows(x0=site_means$mean_logF_removal[tmp],
y0=site_means$q05_logF_control[tmp],
x1=site_means$mean_logF_removal[tmp],
y1=site_means$q95_logF_control[tmp],angle=90,length=0,code=3)
# map fecundity in removals
par(mar=c(4,4,4,4))
map("state",xlim=c(-128,-95),ylim=c(30,52))
#title("Fitness")
points(x=site_means$Lon[tmp],y=site_means$Lat[tmp],pch=".",col="black")
symbols(x=site_means$Lon[tmp],y=site_means$Lat[tmp],circles=site_means$mean_logF_removal[tmp],inches=0.4,add=T)
# mean removal fecundity and climate
par(mar=c(3,5,3,1))
mycol <- ifelse(site_means$Lon[tmp] < -109, "blue","red")
plot(site_means$prcp[tmp],site_means$mean_logF_removal[tmp],pch=16, col=mycol,
xlab="Precipitation (mm)",ylab="log Fecundity")
legend("topright",c("west","east"),pch=16,col=c("blue","red"))
# removal fecundity vs effect of competition
mycol <- ifelse(site_means$Lon[tmp] < -109, "blue","red")
plot(site_means$mean_logF_removal[tmp],site_means$fec_logratio[tmp],
xlab="log Fecundity in Removals",ylab="log(Control/Removal)",pch=16,col=mycol)
abline(h=0,lty="dashed")
legend("bottomleft",c("west","east"),pch=16,col=c("blue","red"))
# not much here
pdf("SWExLongitude.pdf",height=3, width=8.5)
par(mfrow=c(1,3),mar=c(3,5,1,1),mgp=c(2,0.5,0))
plot(site_means$Lon[tmp],site_means$swe_mean[tmp],xlab="Longitude",ylab="Mean daily SWE",pch=16,cex=0.5,
main="Fecundty in removals")
symbols(x=site_means$Lon[tmp],y=site_means$swe_mean[tmp],circles=sqrt(exp(site_means$mean_logF_removal[tmp])),inches=0.4,add=T,fg="blue")
plot(site_means$Lon[tmp],site_means$swe_mean[tmp],xlab="Longitude",ylab="Mean daily SWE",pch=16,cex=0.5,
main="Fecundity in controls")
symbols(x=site_means$Lon[tmp],y=site_means$swe_mean[tmp],circles=sqrt(exp(site_means$mean_logF_control[tmp])),inches=0.4,add=T,fg="blue")
plot(site_means$Lon[tmp],site_means$swe_mean[tmp],xlab="Longitude",ylab="Mean daily SWE",pch=16,cex=0.5,
main="Effect of competition")
tmp2 <- which(site_means$fec_logratio[tmp]<0)
symbols(x=site_means$Lon[tmp[tmp2]],y=site_means$swe_mean[tmp[tmp2]],
circles=abs(site_means$fec_logratio[tmp[tmp2]]),inches=0.4,add=T,fg="red")
tmp2 <- which(site_means$fec_logratio>0)
symbols(x=site_means$Lon[tmp[tmp2]],y=site_means$swe_mean[tmp[tmp2]],
circles=abs(site_means$fec_logratio[tmp[tmp2]]),inches=0.4,add=T,fg="blue")
dev.off()
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
mypch
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-2,7), ylim=c(-2,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
# assign color categories based on fitness outcomes
mycol <-  "blue"  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
# assign color categories based on fitness outcomes
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,"dotted")
abline(0,1,"dashed")
abline(0,1,lty="dashed")
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
0.5*10
exp(log(0.5)+log(50))
exp(log(0.5)+log(10))
# map outcome category
par(mar=c(4,4,4,4))
map("state",xlim=c(-128,-95),ylim=c(30,52))
points(x=site_means$Lon,y=site_means$Lat,pch=16,col=mycol,pch=mypch)
points(x=site_means$Lon,y=site_means$Lat,col=mycol,pch=mypch)
# mean removal fitness and climate
par(mar=c(3,5,3,1))
plot(site_means$prcp,site_means$mean_logF_removal,pch=16, col=mycol,
xlab="Precipitation (mm)",ylab="log Fitness")
legend("topright",c("west","east"),pch=mypch,col=mycol)
plot(site_means$prcp,site_means$fit_removal,pch=16, col=mycol,
xlab="Precipitation (mm)",ylab="log Fitness")
legend("topright",c("west","east"),pch=mypch,col=mycol)
plot(site_means$prcp,site_means$fit_removal,pch=mypch, col=mycol,
xlab="Precipitation (mm)",ylab="log Fitness")
plot(site_means$prcp,site_means$fit_removal,pch=mypch, col=mycol,lwd=2
xlab="Precipitation (mm)",ylab="log Fitness")
plot(site_means$prcp,site_means$fit_removal,pch=mypch, col=mycol,lwd=2,
xlab="Precipitation (mm)",ylab="log Fitness")
# removal fitness vs effect of competition
plot(site_means$fit_removal,site_means$fit_logratio,
xlab="log Fitness in Removals",ylab="log(Control/Removal)",pch=mypch,col=mycol,lwd=2)
abline(h=0,lty="dashed")
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2))
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2)
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2,
ylab="Longitude",xlab="Precipitation (mm)")
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$swe_mean,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
# longitude, swe, and fitness outcome
plot(site_means$Lon,site_means$swe_mean,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Snow water equivalent")
View(site_means)
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$swe_mean,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
col2rgb("blue")
# assign color categories based on fitness outcomes
tmpcol <- rgb(col2rgb("blue"),alpha=0.5)
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5)
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5*255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5,maxColorValue = 255)
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5,maxColorValue = 255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.1,maxColorValue = 255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.9,maxColorValue = 255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
?rgb
colvals
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5,maxColorValue = 255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
pdf("test.pdf",height=3,width=5,units="in")
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5,maxColorValue = 255)
mycol <-  rep("blue",nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
pdf("test.pdf",height=3,width=5)
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
dev.off()
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=0.5,maxColorValue = 255)
mycol <-  rep(tmpcol,nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
# treatment 1:1
pdf("test.pdf",height=3,width=5)
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
dev.off()
mycol
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=200,maxColorValue = 255)
mycol <-  rep(tmpcol,nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
pdf("test.pdf",height=3,width=5)
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
dev.off()
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=100,maxColorValue = 255)
mycol <-  rep(tmpcol,nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
mycol[tmp] <- "black"
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
mycol[tmp] <- "green"
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
mycol[tmp] <- "red"
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
pdf("test.pdf",height=3,width=5)
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
dev.off()
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=100,maxColorValue = 255)
mycol <-  rep(tmpcol,nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
colvals <- col2rgb("black")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=100,maxColorValue = 255)
mycol[tmp] <- tmpcol
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
colvals <- col2rgb("green4")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=100,maxColorValue = 255)
mycol[tmp] <- tmpcol
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
colvals <- col2rgb("red")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=100,maxColorValue = 255)
mycol[tmp] <- tmpcol
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
# treatment 1:1
pdf("test.pdf",height=3,width=5)
par(mar=c(3,5,3,1))
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
dev.off()
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
# assign color categories based on fitness outcomes
colvals <- col2rgb("blue")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
mycol <-  rep(tmpcol,nrow(site_means))  # if fitness control and removal > 0
tmp <- which(site_means$fit_control<0 & site_means$fit_removal<0)
colvals <- col2rgb("black")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
mycol[tmp] <- tmpcol
tmp <- which(site_means$fit_control>0 & site_means$fit_removal<0)
colvals <- col2rgb("green4")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
mycol[tmp] <- tmpcol
tmp <- which(site_means$fit_control<0 & site_means$fit_removal>0)
colvals <- col2rgb("red")
tmpcol <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
mycol[tmp] <- tmpcol
# set threshold for prob of reproduction
threshold <- 0.05
mypch <- ifelse(site_means$pR_control >= threshold & site_means$pR_removal >= threshold,16,1)
plot(site_means$fit_removal,site_means$fit_control, col=mycol,
xlab="Removal",ylab="Control", xlim=c(-5.1,7), ylim=c(-5.1,7),pch=mypch,main="log Fitness")
abline(h=0)
abline(v=0)
abline(0,1,lty="dashed")
# map outcome category
par(mar=c(4,4,4,4))
map("state",xlim=c(-128,-95),ylim=c(30,52))
points(x=site_means$Lon,y=site_means$Lat,col=mycol,pch=mypch)
map("state",xlim=c(-128,-95),ylim=c(30,52))
points(x=site_means$Lon,y=site_means$Lat,col=mycol,pch=mypch,cex=2)
# mean removal fitness and climate
par(mar=c(3,5,3,1))
plot(site_means$prcp,site_means$fit_removal,pch=mypch, col=mycol,lwd=2,
xlab="Precipitation (mm)",ylab="log Fitness")
abline(h=0,lty="dashed")
# removal fitness vs effect of competition
plot(site_means$fit_removal,site_means$fit_logratio,
xlab="log Fitness in Removals",ylab="log(Control/Removal)",pch=mypch,col=mycol,lwd=2)
abline(h=0,lty="dashed")
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
# longitude, swe, and fitness outcome
plot(site_means$Lon,site_means$swe_mean,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Snow water equivalent (cm)")
# longitude, prcp, and fitness outcome
plot(site_means$Lon,site_means$prcp,pch=mypch,col=mycol,lwd=2,
xlab="Longitude",ylab="Precipitation (mm)")
