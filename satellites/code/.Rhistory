transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover,
litter_depth_cm = `Litter depth (if >1cm)`,
notes = Notes) -> comp22
# Figure out unique species for each data set
unique(c(comp20$species, comp21$species), comp22$species) %>%
sort() -> species_list
# Figure out unique species for each data set
unique(c(comp20$species, comp21$species, comp22$species)) %>%
sort() -> species_list
getwd()
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
getwd()
# This code compiles species level Bromus tectorum "competitors" and assigns
# each unique species to a functional group
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
# Load libraries
library(tidyverse)
# Read in 2020-2021 composition data
comp20 <- read_csv("../rawdata/Satellite_composition_2020-2021.csv")
# Read in 2021-2022 composition data
comp21 <- read_csv("../rawdata/Satellite_composition_2021-2022.csv")
# Read in 2020-2021 composition data
comp22 <- read_csv("../rawdata/Satellite_composition_2022-2023.csv")
# Rename columns for brevity
comp20 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover) -> comp20
#litter_depth_cm = `Litter depth (if >1cm)`,
#notes = Notes) -> comp20
#add missing columns
comp20$litter_depth_cm <- NA
comp20$notes <- NA
comp21 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover,
litter_depth_cm = `Litter depth (cm)`,
notes = Notes) -> comp21
comp22 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover,
litter_depth_cm = `Litter depth (if >1cm)`,
notes = Notes) -> comp22
# Combine species observation lists
comp_all <- rbind(comp20, comp21, comp22)
rm(comp20,comp21,comp22)
# Figure out unique species for each data set
unique(comp_all$species) %>%
sort() -> species_list
exists("../deriveddata/species_list.csv")
exists("../deriveddata/species_list.csv")
getwd()
source("C:/repos/bromecast-data/satellites/code/site_means_analysis&figures.R")
source("C:/repos/bromecast-data/satellites/code/run_everything.R")
# start clean
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
# load packages
library(dplyr)
library(tidyr)
library(maps)
# load and clean 2021, 2022, and 2023 demography data
source("load_and_clean_demography_data.R")
# load site info and site climate data
source("load_site_climate_data.R")
# analyze site means for prob. reproduction, fecundity, fitness
# and make figures
source("site_means_analysis&figures.R")
# effect of competition decreases with fitness
control <- removal*c(0.1,0.2,0.3,0.4,0.5,0.6)
# removal fecundity vs effect of competition
mycol <- ifelse(site_means$Lon[tmp] < -109, "blue","red")
plot(site_means$mean_logF_removal[tmp],site_means$fec_logratio[tmp],
xlab="log Fecundity in Removals",ylab="log(Control/Removal)",pch=16,col=mycol)
# Get rid of missing records
D <- subset(D,Reproduced!="missing")
# convert N/Y to 0/1
D$Reproduced <- as.numeric(as.factor(D$Reproduced))-1
prob_reprod <- D %>% group_by(SiteCode,Year,Treatment) %>%
summarize(mean=mean(Reproduced)) %>%
pivot_wider(names_from=Treatment, names_prefix="pR_",values_from=c(mean))
prob_reprod$pR_overall <- (prob_reprod$pR_control + prob_reprod$pR_removal)/2
fecD <- subset(D,D$Fecundity>0 & D$fecundityflag==0)
mean_fecundity <- fecD %>% group_by(SiteCode,Year,Treatment) %>%
summarize(mean=mean(log(Fecundity)),
q05=quantile(log(Fecundity),0.05),
q95=quantile(log(Fecundity),0.95) )  %>%
pivot_wider(names_from=Treatment, names_prefix="logF_",values_from=c(mean, q05, q95))
mean_fecundity$fec_logratio <- mean_fecundity$mean_logF_control - mean_fecundity$mean_logF_removal
# join site means
site_means <- merge(prob_reprod,mean_fecundity,all.x=T)
# calculate fitness on log scales
site_means$fit_control <- log(site_means$pR_control) + site_means$mean_logF_control
site_means$fit_removal <- log(site_means$pR_removal) + site_means$mean_logF_removal
site_means$fit_logratio <- site_means$fit_control - site_means$fit_removal
# set fitness NAs (caused by zero prob. reproduction) to -6 (lower than lowest log fitness)
site_means$fit_control[is.na(site_means$fit_control)] <- -6
site_means$fit_removal[is.na(site_means$fit_removal)] <- -6
# merge to site info and climate data
site_means <- merge(siteD,site_means)
# make transparent colors
colvals <- col2rgb("black")
myblack <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
colvals <- col2rgb("blue3")
myblue <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
colvals <- col2rgb("red3")
myred <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
colvals <- col2rgb("green4")
mygreen <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
colvals <- col2rgb("darkorchid3")
mypurple <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
colvals <- col2rgb("darkorange1")
myorange <- rgb(colvals[1],colvals[2],colvals[3],alpha=120,maxColorValue = 255)
threshold <- 0.05
tmp <- which(site_means$pR_control >= threshold & site_means$pR_removal >= threshold)
par(tcl=-0.2,mgp=c(2,0.5,0),mar=c(3,5,1,1))
plot(site_means$mean_logF_removal[tmp],site_means$mean_logF_control[tmp], col="black",
xlab="Removal",ylab="Control", xlim=c(0,7), ylim=c(0,7),pch=16,main="log Fecundity")
abline(0,1,lty="dashed")
# removals confidence intervals
arrows(x0=site_means$q05_logF_removal[tmp],
y0=site_means$mean_logF_control[tmp],
x1=site_means$q95_logF_removal[tmp],
y1=site_means$mean_logF_control[tmp],angle=90,length=0,code=3)
# controls confidence intervals
arrows(x0=site_means$mean_logF_removal[tmp],
y0=site_means$q05_logF_control[tmp],
x1=site_means$mean_logF_removal[tmp],
y1=site_means$q95_logF_control[tmp],angle=90,length=0,code=3)
names(site_means)
View(site_means)
# treatment 1:1
mycol <- ifelse(site_means$Lon < -110, myorange, mypurple)
par(tcl=-0.2,mgp=c(2,0.5,0),mar=c(3,5,1,1))
plot(site_means$mean_logF_removal[tmp],site_means$mean_logF_control[tmp], col=mycol,
xlab="Removal",ylab="Control", xlim=c(0,7), ylim=c(0,7),pch=16,main="log Fecundity")
abline(0,1)
source("C:/repos/bromecast-data/modeling/code/CalculateGrowingDegreeDays.R")
setwd("C:/repos/bromecast-data/modeling/code")
getwd()
source("C:/repos/bromecast-data/modeling/code/CalculateGrowingDegreeDays.R")
source("C:/repos/bromecast-data/modeling/code/CalculateGrowingDegreeDays.R")
# Make individual plots for each site
data %>%
filter(Year == 2021) %>%
ggplot(aes(x = Jday, y = GrowingDegrees2cm, color = Site)) +
geom_point() +
geom_line() +
facet_wrap(~Site) +
theme_bw(base_size = 16) +
theme(legend.position = "none")
rm(lis=ls())
rm(list=ls())
library(dplyr)
library(Hmisc)
#Set WD to main project folder
setwd("C:/Users/A01972774/OneDrive/Desktop/2023")
rawdata <- read.csv("Raw-Data-BRTE-Study.csv") ##reading in raw data file
setwd("C:/Users/padler/Box/activeProjects/cheat-traits/code")
library(dplyr)
library(Hmisc)
#Set WD to main project folder
setwd("C:/Users/A01972774/OneDrive/Desktop/2023")
setwd("C:/Users/padler/Box/activeProjects/cheat-traits/code")
rawdata <- read.csv("Raw-Data-BRTE-Study.csv") ##reading in raw data file
rawdata <- read.csv("../data/Raw-Data-BRTE-Study.csv") ##reading in raw data file
flat_ids <- read.csv("BRTE_Flat_IDs.csv")
flat_ids <- read.csv("../data/BRTE_Flat_IDs.csv")
# replace dots with NAs
rawdata[rawdata=="."] <- NA
# count NAs by column
colSums(is.na(rawdata))
View(rawdata)
genotypes <- sort(unique(rawdata$Genotype.ID))
rawdata$SLA <- (rawdata$Shoot.leaf.area..cm2.)/(rawdata$Shoot.dry.wt...g.)
rawdata$SRL <- rawdata$Root.Length..cm./rawdata$Root.dry.wt..g.
rawdata$logRSratio <- log(rawdata$Root.dry.wt..g./rawdata$Shoot.dry.wt...g.)
rawdata <- read.csv("../data/Raw-Data-BRTE-Study.csv") ##reading in raw data file
# replace dots with NAs
rawdata[rawdata=="."] <- NA
write.csv(rawdata,"Raw-Data-BRTE-Study-NAs.csv",row.names=F)
rawdata <- read.csv("Raw-Data-BRTE-Study-NAs.csv",header=T) ##reading in raw data file
# count NAs by column
colSums(is.na(rawdata))
genotypes <- sort(unique(rawdata$Genotype.ID))
genotypes
rawdata$SLA <- (rawdata$Shoot.leaf.area..cm2.)/(rawdata$Shoot.dry.wt...g.)
rawdata$SRL <- rawdata$Root.Length..cm./rawdata$Root.dry.wt..g.
rawdata$LeafSize <- rawdata$Shoot.leaf.area..cm2./rawdata$Leaf.no..35d
rawdata$logRSratio <- log(rawdata$Root.dry.wt..g./rawdata$Shoot.dry.wt...g.)
rawdata$LeafSize
# test for differences among genotypes (random effects approach)
library(lme4)
rawdata <- transform(
rawdata, gfactor= as.factor(rawdata$Genotype.ID)
)
#run random effects
g_random <- lmer(SRL ~ 1 + (1|gfactor), data=rawdata)
summary(g_random)
performance::icc(g_random)
g_randomSLA <- lmer(SLA ~ 1 + (1|gfactor), data=rawdata)
summary(g_randomSLA)
performance::icc(g_randomSLA)
g_random_rootlength <- lmer(Root.Length..cm. ~ 1 + (1|gfactor), data=rawdata)
performance::icc(g_random_rootlength)
g_random_leafSize <- lmer(LeafSize ~ 1 + (1|gfactor), data=rawdata)
performance::icc(g_random_rootlength)
performance::icc(g_random_leafSize)
names(rawdata)
g_randomSLA <- lmer(SLA ~ 1 + Time.to.emergence..d. + (1|gfactor), data=rawdata)
summary(g_randomSLA)
performance::icc(g_randomSLA)
g_random_rootlength <- lmer(Root.Length..cm. ~ 1 ++ Time.to.emergence..d.+ (1|gfactor), data=rawdata)
performance::icc(g_random_rootlength)
#run random effects
g_random <- lmer(SRL ~ 1 + + Time.to.emergence..d. + (1|gfactor), data=rawdata)
summary(g_random)
performance::icc(g_random)
g_random_rootlength <- lmer(Root.Length..cm. ~ 1 + Time.to.emergence..d.+ (1|gfactor), data=rawdata)
performance::icc(g_random_rootlength)
g_random_leafSize <- lmer(LeafSize ~ 1 + + Time.to.emergence..d. + (1|gfactor), data=rawdata)
performance::icc(g_random_leafSize)
g_random_Emerge<- lmer(Time.to.emergence..d. ~ 1 + (1|gfactor), data=rawdata)
performance::icc(g_random_Emerge)
g_random_Emerge<- lmer(Time.to.emergence..d. ~ 1 +  Seed.wt...g. + (1|gfactor), data=rawdata)
performance::icc(g_random_Emerge)
summary(g_random_Emerge)
# not clear what exactly is wrong with this one data point,
# combination of very low root dry weight and high root length,
# but on their own, neither of those values looks bad
# Let's remove this one data point
rawdata <- subset(rawdata, SRL < 150000 | is.na(SRL))
g_means <- rawdata %>%
group_by(Genotype.ID) %>%
summarise(missing =sum(is.na(SLA)),
SLA_sd = sd(SLA,na.rm=TRUE),
SLA = mean(SLA,na.rm=TRUE),
SRL_sd = sd(SRL,na.rm=TRUE),
SRL = mean(SRL,na.rm=TRUE),
seed_weight_sd = sd(Seed.wt...g., na.rm = TRUE),
seed_weight = mean(Seed.wt...g., na.rm = TRUE),
seed_SA_sd = sd(Seed.ProjArea.cm2., na.rm= TRUE),
seed_SA= mean(Seed.ProjArea.cm2., na.rm = TRUE),
emergence_time_sd= sd(Time.to.emergence..d., na.rm= TRUE),
emergence_time= mean(Time.to.emergence..d., na.rm = TRUE),
plant_height_21d_SD = sd(Plant.ht..21d..cm., na.rm=TRUE),
plant_height_21d = mean(Plant.ht..21d..cm., na.rm=TRUE),
leaf_no_21d_SD = sd(Leaf.no..21d, na.rm= TRUE),
leaf_no_21d = mean(Leaf.no..21d, na.rm = TRUE),
plant_height_35d_SD = sd(Plant.ht..35d..cm., na.rm =TRUE),
plant_height_35d = mean(Plant.ht..35d..cm., na.rm = TRUE),
leaf_no_35d_SD = sd(Leaf.no..35d, na.rm=TRUE),
leaf_no_35d = mean(Leaf.no..35d, na.rm = TRUE),
shoot_dryweight_SD =sd(Shoot.dry.wt...g., na.rm=TRUE),
shoot_dryweight = mean(Shoot.dry.wt...g., na.rm = TRUE),
leaf_area_SD = sd(Shoot.leaf.area..cm2., na.rm = TRUE),
leaf_area = mean(Shoot.leaf.area..cm2., na.rm= TRUE),
root_weight_SD = sd(Root.dry.wt..g., na.rm = TRUE),
root_weight = mean(Root.dry.wt..g., na.rm =TRUE),
root_length_SD = sd(Root.Length..cm., na.rm= TRUE),
root_length= mean(Root.Length..cm., na.rm= TRUE),
root_to_shoot_SD = sd(logRSratio, na.rm=TRUE),
root_to_shoot_mean = mean(logRSratio, na.rm = TRUE),
EmergeTime_SD = sd(Time.to.emergence..d., na.rm=TRUE),
EmergeTime_SD_mean = mean(Time.to.emergence..d., na.rm = TRUE),
LeafSize_SD = sd(LeafSize, na.rm=TRUE),
LeafSize_SD_mean = mean(LeafSize, na.rm = TRUE)
)
##Analyze relationship between SLA and SRL
plot(g_means$SLA,g_means$SRL, main = "Specific Leaf Area\nto Specific Root Length by Population",
xlab= "SLA (cm2/g)", ylab ="SRL (cm/g)")
SLA.SRL <- lm(SRL~SLA, data= g_means)
summary(SLA.SRL)
abline(SLA.SRL, lty= 1, lwd =2) ## Linear regression
names(g_means)
g_means <- rawdata %>%
group_by(Genotype.ID) %>%
summarise(missing =sum(is.na(SLA)),
SLA_sd = sd(SLA,na.rm=TRUE),
SLA = mean(SLA,na.rm=TRUE),
SRL_sd = sd(SRL,na.rm=TRUE),
SRL = mean(SRL,na.rm=TRUE),
seed_weight_sd = sd(Seed.wt...g., na.rm = TRUE),
seed_weight = mean(Seed.wt...g., na.rm = TRUE),
seed_SA_sd = sd(Seed.ProjArea.cm2., na.rm= TRUE),
seed_SA= mean(Seed.ProjArea.cm2., na.rm = TRUE),
emergence_time_sd= sd(Time.to.emergence..d., na.rm= TRUE),
emergence_time= mean(Time.to.emergence..d., na.rm = TRUE),
plant_height_21d_SD = sd(Plant.ht..21d..cm., na.rm=TRUE),
plant_height_21d = mean(Plant.ht..21d..cm., na.rm=TRUE),
leaf_no_21d_SD = sd(Leaf.no..21d, na.rm= TRUE),
leaf_no_21d = mean(Leaf.no..21d, na.rm = TRUE),
plant_height_35d_SD = sd(Plant.ht..35d..cm., na.rm =TRUE),
plant_height_35d = mean(Plant.ht..35d..cm., na.rm = TRUE),
leaf_no_35d_SD = sd(Leaf.no..35d, na.rm=TRUE),
leaf_no_35d = mean(Leaf.no..35d, na.rm = TRUE),
shoot_dryweight_SD =sd(Shoot.dry.wt...g., na.rm=TRUE),
shoot_dryweight = mean(Shoot.dry.wt...g., na.rm = TRUE),
leaf_area_SD = sd(Shoot.leaf.area..cm2., na.rm = TRUE),
leaf_area = mean(Shoot.leaf.area..cm2., na.rm= TRUE),
root_weight_SD = sd(Root.dry.wt..g., na.rm = TRUE),
root_weight = mean(Root.dry.wt..g., na.rm =TRUE),
root_length_SD = sd(Root.Length..cm., na.rm= TRUE),
root_length= mean(Root.Length..cm., na.rm= TRUE),
root_to_shoot_SD = sd(logRSratio, na.rm=TRUE),
root_to_shoot_mean = mean(logRSratio, na.rm = TRUE),
EmergeTime_SD = sd(Time.to.emergence..d., na.rm=TRUE),
EmergeTime_SD_mean = mean(Time.to.emergence..d., na.rm = TRUE),
LeafSize_SD = sd(LeafSize, na.rm=TRUE),
LeafSize_mean = mean(LeafSize, na.rm = TRUE)
)
names(g_means)
g_random_seedmass<- lmer(Seed ~ 1  + (1|gfactor), data=rawdata)
g_random_seedmass<- lmer(Seed.wt...g. ~ 1  + (1|gfactor), data=rawdata)
performance::icc(g_random_seedmass)
plot(g_means$seed_weight,g_means$LeafSize_mean)
#### Climate Data analysis ####
climate <- read.csv("BioclimateOfOrigin_AllGenotypes.csv")
#### Climate Data analysis ####
climate <- read.csv("..data/BioclimateOfOrigin_AllGenotypes.csv")
#### Climate Data analysis ####
climate <- read.csv("../data/BioclimateOfOrigin_AllGenotypes.csv")
# subset to genotypes in this study
climate <- subset(climate, climate$genotype %in% g_means$Genotype.ID)
# First center and scale all bioclimatic variables
climate_scaled <- climate
climate_scaled[,6:ncol(climate_scaled)] <- apply(climate_scaled[,6:ncol(climate_scaled)], 2, scale)
# Run PCA
pca_out <- prcomp(climate_scaled[,6:ncol(climate_scaled)])
#graph PCA
biplot(pca_out)
# Get percent explained by each PC axis
round(pca_out$sdev^2 / sum(pca_out$sdev^2),3) -> perc_explained
# Bind PC axis data with original data
cbind(climate_scaled, pca_out$x) -> climate_scaled
# select a few columns and join to g_means
g_meansXclim <- merge(g_means,climate_scaled[,c("genotype","lat","lon","ann.mean.tmp","ann.prc",
"PC1","PC2","PC3")],
all.x=T,by.x="Genotype.ID",by.y="genotype")
plot(g_meansXclim$PC1,g_meansXclim$SRL)
cor.test(g_meansXclim$PC1,g_meansXclim$SRL)
plot(g_meansXclim$PC3,g_meansXclim$emergence_time) #p-value = 0.06127
cor.test(g_meansXclim$PC3,g_meansXclim$emergence_time)
plot(g_meansXclim$PC1,g_meansXclim$SRL)
cor.test(g_meansXclim$PC1,g_meansXclim$SRL)
plot(g_meansXclim$PC2,g_meansXclim$SLA) #p-value = 0.09938
cor.test(g_meansXclim$PC2,g_meansXclim$SLA)
plot(g_meansXclim$PC1,g_meansXclim$root_length)
cor.test(g_meansXclim$PC1,g_meansXclim$root_length) #p-value = 0.08687
plot(g_meansXclim$PC1,g_meansXclim$emergence_time) #p-value = 0.5518
cor.test(g_meansXclim$PC1,g_meansXclim$emergence_time)
plot(g_meansXclim$PC1,g_meansXclim$seed_weight)
plot(g_meansXclim$PC2,g_meansXclim$seed_weight)
cor.test(g_meansXclim$PC2,g_meansXclim$seed_weight)
# leaf size
plot(g_meansXclim$PC2,g_meansXclim$LeafSize_mean)
# leaf size
plot(g_meansXclim$PC1,g_meansXclim$LeafSize_mean)
# This code compiles species level Bromus tectorum "competitors" and assigns
# each unique species to a functional group
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
# Load libraries
library(tidyverse)
# Read in 2020-2021 composition data
comp20 <- read_csv("../rawdata/Satellite_composition_2020-2021.csv")
# Read in 2021-2022 composition data
comp21 <- read_csv("../rawdata/Satellite_composition_2021-2022.csv")
# Read in 2020-2021 composition data
comp22 <- read_csv("../rawdata/Satellite_composition_2022-2023.csv")
# Rename columns for brevity
comp20 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover) -> comp20
#litter_depth_cm = `Litter depth (if >1cm)`,
#notes = Notes) -> comp20
#add missing columns
comp20$litter_depth_cm <- NA
comp20$notes <- NA
comp21 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover,
litter_depth_cm = `Litter depth (cm)`,
notes = Notes) -> comp21
comp22 %>%
select(sitecode = SiteCode,
transect = `Transect (N, E, S, or W)`,
treatment = `Treatment (control OR removal)`,
distance_m = `Distance from center (m)`,
species = Species,
cover = Cover,
litter_depth_cm = `Litter depth (if >1cm)`,
notes = Notes) -> comp22
# Combine species observation lists
comp_all <- rbind(comp20, comp21, comp22)
rm(comp20,comp21,comp22)
# Figure out unique species for each data set
unique(comp_all$species) %>%
sort() -> species_list
species_list
# Write csv file to code these as functional groups manually and to fix any issues
write_csv(tibble(species = species_list), "satellites/deriveddata/species_list_raw.csv")
getwd()
# Write csv file to code these as functional groups manually and to fix any issues
write_csv(tibble(species = species_list), "../data/deriveddata/species_list_raw.csv")
# Write csv file to code these as functional groups manually and to fix any issues
write_csv(tibble(species = species_list), "../deriveddata/species_list_raw.csv")
# did a previous species list exist?
tmp <- exists("../deriveddata/species_list_updates.csv")
tmp
?exists
# did a previous species list exist?
tmp <- exists(x="species_list_updates.csv", where="../deriveddata")
# did a previous species list exist?
tmp <- exists(x="species_list_updates.csv", where="../deriveddata")
# did a previous species list exist?
tmp <- file.exists(x="species_list_updates.csv", where="../deriveddata")
tmp
# did a previous species list exist?
tmp <- file.exists("../deriveddata/species_list_updates.csv")
tmp
update_list <- read_csv("../deriveddata/species_list_updates.csv")
# Read in 2020-2021 composition data
comp20 <- read_csv("../rawdata/Satellite_composition_2020-2021.csv")
# Make %notin% operator
`%notin%` <- Negate(`%in%`)
tmp <- species_list %notin% update_list$species
tmp
species_list[1:2]
which(update_list$species==species_list[1])
which(update_list$species==species_list[2])
View(update_list)
update_list <- update_list[,c("species","update")]
is.data.frame(update_list)
test<-species_list[tmp]
sum(tmp)
View(update_list)
tmp <- data.frame("species" = species_list[tmp], "update" = NA)
View(tmp)
update_list <- rbind(update_list,tmp)
update_list <- read_csv("../deriveddata/species_list_updates.csv")
update_list <- read_csv("../deriveddata/species_list_updates.csv")
update_list <- update_list[,c("species","update")]
tmp <- species_list %notin% update_list$species
tmp <- data.frame("species" = species_list[tmp], "update" = NA)
update_list <- rbind(update_list,tmp)
update_list <- update_list[,order(update_list$species)]
View(update_list)
?order
update_list <- update_list[order(update_list$species),]
View(update_list)
#write to file
read_csv(update_list,"../deriveddata/species_list_updates.csv",row.names=F)
#write to file
write.csv(update_list,"../deriveddata/species_list_updates.csv",row.names=F)
update_list <- read.csv("../deriveddata/species_list_updates.csv")
update_list <- update_list[,c("species","update")]
tmp <- species_list %notin% update_list$species
tmp <- data.frame("species" = species_list[tmp], "update" = NA)
update_list <- read.csv("../deriveddata/species_list_updates.csv")
update_list <- update_list[,c("species","update")]
tmp <- species_list %notin% update_list$species
tmp <- data.frame("species" = species_list[tmp], "update" = NA)
update_list <- read.csv("../deriveddata/species_list_updates_old.csv")
update_list <- update_list[,c("species","update")]
tmp <- species_list %notin% update_list$species
tmp <- data.frame("species" = species_list[tmp], "update" = NA)
update_list <- rbind(update_list,tmp)
update_list <- update_list[order(update_list$species),]
#write to file
write.csv(update_list,"../deriveddata/species_list_updates.csv",row.names=F)
