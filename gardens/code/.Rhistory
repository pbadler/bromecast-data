15937+480
1049-480
4000+351+6000+480+569+3000
source("C:/Users/adler/Box/teaching/CommEcol/resource_ratio/ResRatio_2spp_demo.r")
``
source("C:/Users/adler/Box/teaching/CommEcol/resource_ratio/ResRatio_2spp_demo.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
N
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
source("C:/Users/adler/Box/teaching/CommEcol/resource_ratio/ResRatio_2spp_demo.r")
source("C:/Users/adler/Box/teaching/CommEcol/LV/LKclassic.r")
library(mvtnorm)
sigma = matrix(data=c(0.5,-0.1,-0.1,0.5),2,2)
sigma
z <- rmvtnorm(1,c(0,0),sigma)
z <- rmvnorm(1,c(0,0),sigma)
z
z <- rmvnorm(500,c(0,0),sigma)
head(z)
plot(z)
sigma = matrix(data=c(0.5,-0.3,-0.3,0.5),2,2)
z <- rmvnorm(500,c(0,0),sigma)
plot(z)
exp(-0.37)
8289+13440
site = c("siteA","siteA","siteA","siteB","siteB","siteB")
year = c(1,2,3,1,2,3)
spp1 = c(10,8,12,2,4,7)
spp2 = c(1,0,0,0,0,0)
spp3 = c(5,1,8,10,15,11)
# first, let's turn these into a matrix:
myMatrix = as.matrix(cbind(site,year,spp1,spp2,spp3))
# now look at it
myMatrix
# You can see that everything is in quotes--even the spp densities are held as "strings" (character data).
# That's because a matrix contains EITHER numeric variabiles OR strings.
# If we did
myMatrix = as.matrix(cbind(year,spp1,spp2,spp3))
# We could get just numbers:
myMatrix
# Data frames can contain both numbers and strings:
myMatrix = data.frame(cbind(site,year,spp1,spp2,spp3))
myMatrix
# You can use matrix-style indexing, or use the names of the variables. Compare
myMatrix[,1]
#with
myMatrix$site
# Data frames can contain both numbers and strings:
myMatrix = data.frame(cbind(site,year,spp1,spp2,spp3),stringsAsFactors = T)
myMatrix$site
myMatrix
yrs <- 30
ppt <- rnorm(yrs,0,5)
Nspp <- 5
sppMeans<- c(10,5,2,2,2)
sppStdevs <-  c(3,2,1,1,1)
pptEffect <-  c(1,1,1,1,1)
# get expected values for each species in each year
matrix(sppMeans,yrs,Nspp)
# get expected values for each species in each year
matrix(sppMeans,yrs,Nspp,byrow=T)
matrix(ppt,yrs,Nspp)
matrix(ppt,yrs,Nspp)%*%pptEffect
pptEffect <-  matrix(c(1,1,1,1,1),1,Nspp)
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)%*%pptEffect
pptEffect <-  matrix(c(1,1,1,1,1),Nspp,1)
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)%*%pptEffect
B <- matrix(ppt,yrs,Nspp)
dim(B)
B%*%pptEffect
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)%*%pptEffect
pptEffect <-  c(1,1,1,1,1)
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)*pptEffect
matplot(tmp)
matplot(tmp,type="l")
pptEffect <-  c(2,1,1,1,1)
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)*pptEffect
# get expected values for each species in each year
tmp <- matrix(sppMeans,yrs,Nspp,byrow=T)+matrix(ppt,yrs,Nspp)*pptEffect
matplot(tmp,type="l")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
sppCVs <-apply(sppData,MARGIN=2,FUN="sd")
sppVCs
sppCVs
sppCVs <-apply(sppData,MARGIN=2,FUN="sd")/colMeans(sppData)
sppCVs
commCV <- sd(rowSums(sppData))/mean(rowSums(sppData))
commCV
sppCVs <- apply(sppData,MARGIN=2,FUN="sd")/colMeans(sppData)
print(mean(sppCVs))
commCV <- sd(rowSums(sppData))/mean(rowSums(sppData))
print(commCV)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
sppCVs
source("~/.active-rstudio-document")
yrEffects <- matrix(ppt,yrs,Nspp)*(pptEffect*sppStdevs)
matplot(yrEffects)
yrEffects <- (matrix(ppt,yrs,Nspp)*pptEffect)*sppStdevs
yrEffects
yrEffects <- matrix(ppt,yrs,Nspp)*pptEffect/sppStdevs
matplot(yrEffects)
yrEffects <- matrix(ppt,yrs,Nspp)*pptEffect
yrEffects
yrEffects*sppStdevs
yrEffects <- matrix(ppt,yrs,Nspp)*matrix(pptEffect*sppStdevs,yrs,Nspp,byrow=T)
yrEffects
matplot(yrEffects, type="l'")
matplot(yrEffects, type="l")
sppData <- sppData+yrEffects
matplot(sppData,type="l")
source("C:/Users/adler/Box/teaching/CommEcol/stability/random_time_series_demo.R")
source("C:/Users/adler/Box/teaching/CommEcol/stability/random_time_series_demo.R")
source("C:/Users/adler/Box/teaching/CommEcol/stability/random_time_series_demo.R")
source("C:/Users/adler/Box/teaching/CommEcol/stability/random_time_series_demo.R")
source("C:/Users/adler/Box/teaching/CommEcol/stability/random_time_series_demo.R")
1888.78/6
100*1.02
102*0.98
99.96*1.04
0.92*1002
0.92*102
93.84*1.12
105*1.04
109.2+1.06
105*0.95
99.75*1.15
109.2*1.06
16*150
16*150
+3*600
sample(3,1:18)
sample(1:18.3)
sample(1:18,3)
sample(14:27,1)
###
###  Assemble complete data set
###
# import formatted growth and phenology data
pgD <- read.csv(paste0("../deriveddata/",dosite,doyear,"_growthphenology_by_plantID.csv"),header=T)
dosite <- 2022
doyear <- 2-22
doyear <- 2022
dosite <- "SS"
###
###  Assemble complete data set
###
# import formatted growth and phenology data
pgD <- read.csv(paste0("../deriveddata/",dosite,doyear,"_growthphenology_by_plantID.csv"),header=T)
# start clean
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
# load packages
library(tidyr)
library(dplyr)
library(lubridate)
source("QAQC_functions.R")
###
###  Assemble complete data set
###
# import formatted growth and phenology data
pgD <- read.csv(paste0("../deriveddata/",dosite,doyear,"_growthphenology_by_plantID.csv"),header=T)
# start clean
rm(list=ls())
# To use relative paths, we need to set working directory to source file location
# (this method only works on Rstudio)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path )) # set working directory to location of this file
# load packages
library(tidyr)
library(dplyr)
library(lubridate)
source("QAQC_functions.R")
doyear <- 2022 # growing season to do
dosite <- "SS" # code for focal site
###
###  Assemble complete data set
###
# import formatted growth and phenology data
pgD <- read.csv(paste0("../deriveddata/",dosite,doyear,"_growthphenology_by_plantID.csv"),header=T)
# import and join individual plant info
tmp <- read.csv(paste0("../deriveddata/",dosite,doyear,"_plantID.csv"),header=T)
pgD <- merge(pgD,tmp)
# import and join treatment data
tmp <- read.csv(paste0("../rawdata/garden_treatments.csv"),header=T)
names(tmp)[which(names(tmp)=="garden")] <- "site"  # rename
tmp <- tmp[,-which(names(tmp)=="cum_plot")]  # drop column
pgD <- merge(pgD,tmp)
# import and join flags
tmp <- read.csv(paste0("../deriveddata/",dosite,doyear,"_flags.csv"),header=T)
pgD <- merge(pgD,tmp)
rm(tmp)
# cut missing plants and plants with suspicious positions
sum(!is.na(pgD$missing_plant))  # no missing plants in this data set
sum(!is.na(pgD$bad_position))
pgD[which(!is.na(pgD$bad_position)),] # these do look bad!
pgD <- subset(pgD,is.na(pgD$bad_position))
emergD <- group_by(pgD,plantID) %>% summarise(emerged=sum(live=="Y"))
emergD$emerged <- ifelse(emergD$emerged<1,0,1)
emergD <- merge(emergD,pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","emergence_date","frostheave_date")])
emergD <- group_by(pgD,plantID) %>% summarise(emerged=sum(live=="Y"))
emergD$emerged <- ifelse(emergD$emerged<1,0,1)
# get treatment info for each plant
tmp <- unique(pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","emergence_date","frostheave_date")],
MARGIN=2)
# get treatment info and relevant flags for each plant
tmp <- unique(pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","emergence_date","frostheave_date")],
MARGIN=2)
emergD <- merge(emergD,tmp)
head(emergD)
table(emergD$$emerged)
table(emergD$emerged)
# remove plants affected by frostheave
drop <- which(emergD$frostheave_date<emergD$emergence_date)
drop
emergD[,2743]
emergD[2743,]
emergD[3518,]
# do simple glm, no random effects
m1 <- glm(emerged ~ gravel,, family="binomial",data=emergD)
summary(m1)
sum(emergD$emerged)/nrow(emergD)
# do simple glm, no random effects
m1 <- glm(emerged ~ gravel*density, family="binomial",data=emergD)
summary(m1)
View(emergD)
NA < 100
names(pgD)
tmp <- pgD[,c("plantID","v")]
tmp <- pgD[,c("plantID","v")]
tmp <- tmp[tmp$v=="FP",]
tmp <- unique(tmp, MARGIN=2)
tmp <- pgD[,c("plantID","v")]
tmp <- tmp[tmp$v=="FP",]
head(tmp)
tmp <- pgD[,c("plantID","v")]
head(tmp)
tmp <- tmp[tmp$v=="FG",]
head(tmp)
tmp <- unique(tmp, MARGIN=2)
head(tmp)
# subset full data set to these plants
keep <- which(pgD$plantID %in% tmp$plantID)
length(keep)
flowerD <- pgD[keep,]
View(flowerD)
test <- flowerD %>% group_by(site,year,plantID) %>% summarise(flowerday = min(v=="FG"))
head(test)
test <- flowerD %>% group_by(site,year,plantID) %>% summarise(flowerday = min(jday[v=="FG"]))
head(test)
# subset full data set to these plants
keep <- which(pgD$plantID %in% tmp$plantID)
flowerD <- pgD[keep,]
# keep earliest flowering data
flowerD <- flowerD %>% group_by(plantID) %>% summarise(flowerday = min(jday[v=="FG"]))
head(flowerD)
names(pgD)
# get treatment info and relevant flags for each plant
tmp <- unique(pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","resurrection_date", "pheno_regress",
"growth_regress_mm", "herbivory_date", "frostheave_date")],
MARGIN=2)
flowerD <- merge(flowerD,tmp)
View(flowerD)
names(flowerD)
# do simple linear model (no random effects) with no filtering of flagged records
m1 <- lm(flowerday ~ gravel*density*genotype,data=flowerD)
summary(m1)
flowerD$genotype <- as.factor(flowerD$genotype)
# do simple linear model (no random effects) with no filtering of flagged records
m1 <- lm(flowerday ~ gravel*density*genotype,data=flowerD)
summary(m1)
# do simple linear model (no random effects) with no filtering of flagged records
m1 <- lm(flowerday ~ gravel*density + genotype,data=flowerD)
summary(m1)
library(lmer) # should switch to mgcv
library(lme4) # should switch to mgcv
# do linear model
m1 <- lmer(flowerday ~ gravel*density, random = 1|black/plot + genotype,data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1|black/plot + genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1|block/plot + genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1 | block + genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1 | block/plot),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1 | block/plot) + (1 + gravel*density|genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1 | block/plot) + (1 |genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1|genotype),data=flowerD)
summary(m1)
varcom(m1)
VarCorr(m1)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1| block+ plot) + (1|genotype),data=flowerD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1| block/plot) + (1|genotype),data=flowerD)
summary(m1)
# drop plants that "resurrect" before flowering
drop <- which(flowerD$flowerday>flowerD$resurrection_date)
drop
flowerD <- flowerD[-drop,]
rm(emergD)
# do linear model
m1 <- lmer(flowerday ~ gravel*density + (1| block) + (1|genotype),data=flowerD)
summary(m1)
VarCorr(m1)
table(flowerD$pheno_regress)
table(flowerD$herbivory_date)
unique(flowerD$herbivory_date)
# repeat, with extremely conservative data set, drop all flags
drop <- which(flowerD$pheno_regress<0 | !is.na(flowerD$herbivory_date) |
!is.na(flowerD$frostheave_date) )
flowerD2 <- flowerD[drop,]
m1 <- lmer(flowerday ~ gravel*density + (1| block) + (1|genotype),data=flowerD2)
summary(m1)
VarCorr(m1)
table(flowerD$pheno_regress)
# a less extreme approach to filtering
drop <- which(flowerD$pheno_regress<1) # only drop records that reverse 2 or more phenophases
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs at the same time
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday )
### A less extreme approach to filtering
# Let's ignore frostheaving--if it killed the plant, it wouldn't
# be in the flowering dataset.
# Next, drop records that reverse 2 or more phenophases
drop <- which(flowerD$pheno_regress<1)
flowerD3 <- flowerD[drop,]
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs at the same time
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday )
### A less extreme approach to filtering
# Let's ignore frostheaving--if it killed the plant, it wouldn't
# be in the flowering dataset.
# Next, drop records that reverse 2 or more phenophases
drop <- which(flowerD$pheno_regress<1)
flowerD3 <- flowerD[-drop,]
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs at the same time
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday )
flowerD3 <- flowerD3[-drop,]
### A less extreme approach to filtering
# Let's ignore frostheaving--if it killed the plant, it wouldn't
# be in the flowering dataset.
# Next, drop records that reverse 2 or more phenophases
drop <- which(flowerD$pheno_regress<1)
flowerD3 <- flowerD[-drop,]
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs at the same time
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday )
flowerD3 <- flowerD3[-drop,]
View(flowerD3)
###
###  Assemble complete data set
###
# import formatted growth and phenology data
pgD <- read.csv(paste0("../deriveddata/",dosite,doyear,"_growthphenology_by_plantID.csv"),header=T)
# import and join individual plant info
tmp <- read.csv(paste0("../deriveddata/",dosite,doyear,"_plantID.csv"),header=T)
pgD <- merge(pgD,tmp)
# import and join treatment data
tmp <- read.csv(paste0("../rawdata/garden_treatments.csv"),header=T)
names(tmp)[which(names(tmp)=="garden")] <- "site"  # rename
tmp <- tmp[,-which(names(tmp)=="cum_plot")]  # drop column
pgD <- merge(pgD,tmp)
# import and join flags
tmp <- read.csv(paste0("../deriveddata/",dosite,doyear,"_flags.csv"),header=T)
pgD <- merge(pgD,tmp)
rm(tmp)
# cut missing plants and plants with suspicious positions
sum(!is.na(pgD$missing_plant))  # no missing plants in this data set
sum(!is.na(pgD$bad_position))
pgD[which(!is.na(pgD$bad_position)),] # these do look bad!
pgD <- subset(pgD,is.na(pgD$bad_position))
library(lme4) # should switch to mgcv
# get list of plants that made it to FG
tmp <- pgD[,c("plantID","v")]
tmp <- tmp[tmp$v=="FG",]
tmp <- unique(tmp, MARGIN=2)
# subset full data set to these plants
keep <- which(pgD$plantID %in% tmp$plantID)
flowerD <- pgD[keep,]
View(flowerD)
sum(length(table(flowerD$plantID))>1)
which(length(table(flowerD$plantID))>1)
table(flowerD$plantID)
# keep earliest flowering data
flowerD <- flowerD %>% group_by(plantID) %>% summarise(flowerday = min(jday[v=="FG"]))
max(table(flowerD$plantID))
# get treatment info and relevant flags for each plant
tmp <- unique(pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","resurrection_date", "pheno_regress",
"growth_regress_mm", "herbivory_date", "frostheave_date")],
MARGIN=2)
flowerD <- merge(flowerD,tmp)
flowerD$genotype <- as.factor(flowerD$genotype)
# drop plants that "resurrect" before flowering
drop <- which(flowerD$flowerday>flowerD$resurrection_date)
flowerD <- flowerD[-drop,]
View(flowerD)
View(flowerD)
# get list of plants that made it to FG
tmp <- pgD[,c("plantID","v")]
tmp <- tmp[tmp$v=="FG",]
tmp <- unique(tmp, MARGIN=2)
# subset full data set to these plants
keep <- which(pgD$plantID %in% tmp$plantID)
flowerD <- pgD[keep,]
flowerD[flowerD$plantID=="SS2022_1014",]
min(flowerD[flowerD$plantID=="SS2022_1014","jday"])
# get list of plants that made it to FG
tmp <- pgD[,c("plantID","v")]
tmp <- tmp[tmp$v=="FG",]
tmp <- unique(tmp, MARGIN=2)
# subset full data set to these plants
keep <- which(pgD$plantID %in% tmp$plantID)
flowerD <- pgD[keep,]
# keep earliest flowering data
flowerD <- flowerD %>% group_by(plantID) %>% summarise(flowerday = min(jday[v=="FG"],na.rm=T))
View(flowerD)
sum(is.na(flowerD$flowerday))
# get treatment info and relevant flags for each plant
tmp <- unique(pgD[,c("site","year","plantID","block","plot","density",
"gravel","genotype","growout","resurrection_date", "pheno_regress",
"growth_regress_mm", "herbivory_date", "frostheave_date")],
MARGIN=2)
flowerD <- merge(flowerD,tmp)
flowerD$genotype <- as.factor(flowerD$genotype)
# drop plants that "resurrect" before flowering
drop <- which(flowerD$flowerday>flowerD$resurrection_date)
flowerD <- flowerD[-drop,]
# do linear model, ignoring the rest of the flags
m1 <- lmer(flowerday ~ gravel*density + (1| block) + (1|genotype),data=flowerD)
summary(m1)
VarCorr(m1)
### repeat, with extremely conservative data set, drop all flags
drop <- which(flowerD$pheno_regress<0 | !is.na(flowerD$herbivory_date) |
!is.na(flowerD$frostheave_date) )
flowerD2 <- flowerD[drop,]  # lose almost half the data
m2 <- lmer(flowerday ~ gravel*density + (1| block) + (1|genotype),data=flowerD2)
summary(m1)
VarCorr(m1)
summary(m2)
VarCorr(m2)
### A less extreme approach to filtering
# Let's ignore frostheaving--if it killed the plant, it wouldn't
# be in the flowering dataset.
# Next, drop records that reverse 2 or more phenophases
drop <- which(flowerD$pheno_regress<1)
flowerD3 <- flowerD[-drop,]
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs at the same time
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday )
# Next, drop records where herbivory occurs before flowering
# AND large growth regression occurs
drop <- which(flowerD3$herbivory_date <=  flowerD3$flowerday & flowerD3$growth_regress_mm < 15 )
# Next, drop records where herbivory occurs
# AND large growth regression occurs
drop <- which(!is.na(flowerD3$herbivory_date) &  flowerD3$flowerday & flowerD3$growth_regress_mm < 15 )
length(drop)
# Next, drop records where herbivory occurs
# AND large growth regression occurs
drop <- which(!is.na(flowerD3$herbivory_date) &  flowerD3$growth_regress_mm < 15 )
View(flowerD3)
# Next, drop records where herbivory occurs
# AND large growth regression occurs
drop <- which(!is.na(flowerD3$herbivory_date) &  flowerD3$growth_regress_mm < -15 )
### A less extreme approach to filtering
# Let's ignore frostheaving--if it killed the plant, it wouldn't
# be in the flowering dataset.
# Next, drop records that reverse 2 or more phenophases
drop <- which(flowerD$pheno_regress<1)
flowerD3 <- flowerD[-drop,]
# Next, drop records where herbivory occurs
# AND large growth regression occurs
drop <- which(!is.na(flowerD3$herbivory_date) &  flowerD3$growth_regress_mm < -15 )
flowerD3 <- flowerD3[-drop,]
m3 <- lmer(flowerday ~ gravel*density + (1| block) + (1|genotype),data=flowerD3)
summary(m3)
VarCorr(m3)
m3 <- lmer(flowerday ~ gravel*density + (1| block) + (1 + gravel|genotype),data=flowerD3)
summary(m3)
VarCorr(m3)
